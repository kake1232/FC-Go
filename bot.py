import os
import logging
from threading import Event
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    Filters
)
import requests
import sqlite3
from datetime import datetime, timedelta

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
MIN_PRICE, MAX_PRICE = range(2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
API_URL = "https://api.fragment.com/numbers"
DB_NAME = "users.db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
conn = sqlite3.connect(DB_NAME)
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        min_price REAL,
        max_price REAL
    )
''')
conn.commit()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω", callback_data='set_price')],
        [InlineKeyboardButton("üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='show_settings')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NFT-–º–æ–Ω–∏—Ç–æ—Ä Fragment!",
        reply_markup=reply_markup
    )

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    
    if query.data == 'set_price':
        query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ TON:")
        return MIN_PRICE
    elif query.data == 'show_settings':
        show_settings(update, context)
    return ConversationHandler.END

def min_price_input(update: Update, context: CallbackContext):
    try:
        price = float(update.message.text)
        context.user_data['min_price'] = price
        update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ TON:")
        return MAX_PRICE
    except ValueError:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return MIN_PRICE

def max_price_input(update: Update, context: CallbackContext):
    try:
        max_price = float(update.message.text)
        min_price = context.user_data.get('min_price', 0)
        
        if max_price <= min_price:
            raise ValueError("–ú–∞–∫—Å–∏–º—É–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º—É–º–∞")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        user_id = update.effective_user.id
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, min_price, max_price)
            VALUES (?, ?, ?)
        ''', (user_id, min_price, max_price))
        conn.commit()
        
        update.message.reply_text(f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {min_price} - {max_price} TON")
        return ConversationHandler.END
    except ValueError as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É:")
        return MAX_PRICE

def show_settings(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT min_price, max_price FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    
    if result:
        text = f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n–ú–∏–Ω–∏–º—É–º: {result[0]} TON\n–ú–∞–∫—Å–∏–º—É–º: {result[1]} TON"
    else:
        text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    
    context.bot.send_message(chat_id=user_id, text=text)

def cancel(update: Update, context: CallbackContext):
    update.message.reply_text('üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
    return ConversationHandler.END

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (fetch_fragment_data, send_updates, error_handler) –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # –î–∏–∞–ª–æ–≥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={
            MIN_PRICE: [MessageHandler(Filters.text & ~Filters.command, min_price_input)],
            MAX_PRICE: [MessageHandler(Filters.text & ~Filters.command, max_price_input)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(conv_handler)
    dp.add_handler(CallbackQueryHandler(button_handler))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    jq = updater.job_queue
    jq.run_repeating(send_updates, interval=1800, first=10)
    dp.add_error_handler(error_handler)

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()