import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    ConversationHandler,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pandas as pd
from sqlalchemy import create_engine, Column, String, Boolean, Integer, DateTime
from sqlalchemy.orm import declarative_base, sessionmaker

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
DATABASE_URL = os.getenv("DATABASE_URL")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Base = declarative_base()
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String)
    chat_id = Column(Integer)
    status = Column(String)  # 'premium', 'blocked', 'default'
    last_report = Column(DateTime)

class AuthCode(Base):
    __tablename__ = 'auth_codes'
    code = Column(String, primary_key=True)
    used = Column(Boolean, default=False)

Base.metadata.create_all(engine)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
AUTH, REPORT, ADMIN = range(3)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def generate_keyboard(buttons):
    return InlineKeyboardMarkup([[InlineKeyboardButton(text, callback_data=data)] for text, data in buttons])

async def send_to_admin(context: CallbackContext, message: str):
    await context.bot.send_message(chat_id=ADMIN_ID, text=message)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
    return AUTH

async def handle_auth_code(update: Update, context: CallbackContext):
    code = update.message.text.upper()
    session = Session()
    auth_code = session.query(AuthCode).filter_by(code=code, used=False).first()
    
    if auth_code:
        auth_code.used = True
        user = User(
            username=update.effective_user.username,
            chat_id=update.effective_chat.id,
            status='default'
        )
        session.add(user)
        session.commit()
        await send_to_admin(context, f"üö® –ö–æ–¥ {code} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{user.username}")
        await update.message.reply_text("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup=main_menu())
        return ConversationHandler.END
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return AUTH

async def request_report(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üìù –ü–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á–µ—Ç:",
        reply_markup=generate_keyboard([("–ü—Ä–µ–º–∏—É–º", "premium"), ("–ë–ª–æ–∫ –≤ —á–∞—Ç–µ", "blocked"), ("–î—Ä—É–≥–æ–µ", "other")])
    )
    return REPORT

async def handle_report(update: Update, context: CallbackContext):
    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    await update.message.reply_text("üìä –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç:")
    # ... (–∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel)
    return ConversationHandler.END

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
async def admin_panel(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_ID:
        return
    buttons = [
        ("–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel", "upload_excel"),
        ("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", "generate_code"),
        ("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "list_users")
    ]
    await update.message.reply_text("‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=generate_keyboard(buttons))

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á ---
async def send_scheduled_data(context: CallbackContext):
    session = Session()
    users = session.query(User).all()
    for user in users:
        # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
        await context.bot.send_message(chat_id=user.chat_id, text="üìÖ –î–∞–Ω–Ω—ã–µ: ...")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
def main():
    application = Application.builder().token(TOKEN).build()
    
    # Conversation Handler –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            AUTH: [MessageHandler(filters.TEXT, handle_auth_code)],
            REPORT: [MessageHandler(filters.PHOTO | filters.TEXT, handle_report)]
        },
        fallbacks=[]
    )
    
    # –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler('admin', admin_panel))
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_scheduled_data, 'interval', minutes=10)
    scheduler.start()
    
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()